package search

import scala.xml._
import java.io.PrintWriter

object SchemaParser extends Application {
	
	private val nl = System.getProperty("line.separator")
	
	// Parses the Solr Schema.xml file, and generates a class definition for the corresponding IndexedFields class
	private def parseSolrXML = {
		var sb = new StringBuilder
		val data = XML.loadFile(Config("search.solr.schema.path"))
		val schemaName = data \\ "schema" \ "@name"
		val className = schemaName + "Fields"
		
		// Generate imports and class definition
		sb.append("package search" + nl)
		sb.append("import model." + schemaName + nl + nl)
		sb.append("// WARNING: This file is generated by SchemaParser.scala, if you modify it " + nl)
		sb.append("// your changes will be overwritten next time you run it." + nl)
		sb.append("object " + className + " {" + nl)
		
		// Add field definitions
		for(val field <- data \\ "schema" \ "fields" \ "field") {
			val fieldName = field\"@name" 
			sb.append("    val " + fieldName + " = new Field[" + schemaName + "](\"" + fieldName + "\")").append(nl)
		}
		
		// Close class definition, contents is complete
		sb.append("}")
		
		new ClassFile(className, sb.toString)
	}
	
	// Writes a class definition to the source path, overwriting the file if it exists
	private def writeFile(cf: ClassFile) = {
		val out = new PrintWriter("src/search/" + cf.name + ".scala")
		try{ out.println(cf.contents) }
		finally{ out.close }
	}
	
	class ClassFile(val name:String, val contents:String) {}
	
	
	// Parse schema.xml and write the corresponding IndexedFields.scala file 
	val cf = parseSolrXML
	writeFile(cf)
}

